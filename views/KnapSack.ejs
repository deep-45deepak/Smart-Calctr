<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Knapsack Problem Solver</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f4f7fc;
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
    .container {
      background-color: #ffffff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 600px;
    }
    h1 {
      text-align: center;
      color: #333;
    }
    label {
      font-weight: bold;
      margin-top: 10px;
      display: block;
    }
    input, select {
      width: 100%;
      padding: 8px;
      margin: 5px 0 15px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      background-color: #4CAF50;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      width: 100%;
    }
    button:hover {
      background-color: #45a049;
    }
    .result {
      margin-top: 20px;
      padding: 15px;
      background-color: #e7f7e7;
      border-left: 5px solid #4CAF50;
    }
    .error {
      color: red;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Knapsack Problem Solver</h1>
    <form id="knapsackForm">
      <label for="capacity">Knapsack Capacity:</label>
      <input type="number" id="capacity" required />

      <label for="weights">Item Weights (comma-separated):</label>
      <input type="text" id="weights" required />

      <label for="values">Item Values (comma-separated):</label>
      <input type="text" id="values" required />

      <label for="approach">Choose Approach:</label>
      <select id="approach">
        <option value="dp">Dynamic Programming</option>
        <option value="greedy">Greedy (Fractional)</option>
        <option value="bnb">Branch and Bound</option>
      </select>

      <button type="submit">Solve Knapsack</button>
    </form>

    <div id="error" class="error"></div>

    <div id="result" class="result" style="display: none;">
      <p><strong>Maximum Value:</strong> <span id="maxValue"></span></p>
      <p><strong>Selected Items:</strong> <span id="selectedItems"></span></p>
    </div>
  </div>

  <script>
    document.getElementById('knapsackForm').addEventListener('submit', function (e) {
      e.preventDefault();

      const capacity = parseFloat(document.getElementById('capacity').value);
      const weights = document.getElementById('weights').value.split(',').map(Number);
      const values = document.getElementById('values').value.split(',').map(Number);
      const approach = document.getElementById('approach').value;

      if (weights.length !== values.length) {
        document.getElementById('error').textContent = 'Error: The number of weights must match values.';
        return;
      }

      let result;
      switch (approach) {
        case 'dp':
          result = solveDP(values, weights, capacity);
          break;
        case 'greedy':
          result = solveGreedy(values, weights, capacity);
          break;
        case 'bnb':
          result = solveBnB(values, weights, capacity);
          break;
      }

      document.getElementById('maxValue').textContent = result.maxValue;
      document.getElementById('selectedItems').textContent = result.selectedItems.join(', ');
      document.getElementById('result').style.display = 'block';
      document.getElementById('error').textContent = '';
    });

    function solveDP(values, weights, capacity) {
      const n = values.length;
      const dp = Array.from({ length: n + 1 }, () => Array(capacity + 1).fill(0));

      for (let i = 1; i <= n; i++) {
        for (let w = 0; w <= capacity; w++) {
          if (weights[i - 1] <= w) {
            dp[i][w] = Math.max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]);
          } else {
            dp[i][w] = dp[i - 1][w];
          }
        }
      }

      let w = capacity;
      const selected = [];
      for (let i = n; i > 0 && w > 0; i--) {
        if (dp[i][w] !== dp[i - 1][w]) {
          selected.push(i - 1);
          w -= weights[i - 1];
        }
      }

      return {
        maxValue: dp[n][capacity],
        selectedItems: selected.reverse()
      };
    }

    function solveGreedy(values, weights, capacity) {
      const n = values.length;
      const ratio = values.map((v, i) => ({ index: i, ratio: v / weights[i] }));
      ratio.sort((a, b) => b.ratio - a.ratio);

      let totalValue = 0;
      let selected = [];
      let remaining = capacity;

      for (let i = 0; i < n && remaining > 0; i++) {
        const idx = ratio[i].index;
        if (weights[idx] <= remaining) {
          totalValue += values[idx];
          selected.push(idx);
          remaining -= weights[idx];
        } else {
          const frac = remaining / weights[idx];
          totalValue += values[idx] * frac;
          selected.push(`${idx} (partial)`);
          break;
        }
      }

      return { maxValue: totalValue.toFixed(2), selectedItems: selected };
    }

    function solveBnB(values, weights, capacity) {
      const n = values.length;
      const items = values.map((v, i) => ({
        index: i,
        value: v,
        weight: weights[i],
        ratio: v / weights[i]
      })).sort((a, b) => b.ratio - a.ratio);

      let maxProfit = 0;
      let bestItems = [];

      function bound(level, weight, value) {
        if (weight >= capacity) return 0;
        let profitBound = value;
        let j = level;
        let totweight = weight;

        while (j < n && totweight + items[j].weight <= capacity) {
          totweight += items[j].weight;
          profitBound += items[j].value;
          j++;
        }

        if (j < n) profitBound += (capacity - totweight) * items[j].ratio;
        return profitBound;
      }

      function knapsack(level, weight, value, selected) {
        if (weight > capacity) return;
        if (value > maxProfit) {
          maxProfit = value;
          bestItems = selected.slice();
        }
        if (level >= n) return;

        let b = bound(level + 1, weight + items[level].weight, value + items[level].value);
        if (b > maxProfit) {
          selected.push(items[level].index);
          knapsack(level + 1, weight + items[level].weight, value + items[level].value, selected);
          selected.pop();
        }

        b = bound(level + 1, weight, value);
        if (b > maxProfit) {
          knapsack(level + 1, weight, value, selected);
        }
      }

      knapsack(0, 0, 0, []);
      return { maxValue: maxProfit, selectedItems: bestItems };
    }
  </script>
</body>
</html>
